diff --git a/node_modules/rc-input-number/lib/utils/MiniDecimal.d.ts b/node_modules/rc-input-number/lib/utils/MiniDecimal.d.ts
new file mode 100644
index 0000000..d038531
--- /dev/null
+++ b/node_modules/rc-input-number/lib/utils/MiniDecimal.d.ts
@@ -0,0 +1,67 @@
+export declare type ValueType = string | number;
+export interface DecimalClass {
+    add: (value: ValueType) => DecimalClass;
+    isEmpty: () => boolean;
+    isNaN: () => boolean;
+    isInvalidate: () => boolean;
+    toNumber: () => number;
+    /**
+     * Parse value as string. Will return empty string if `isInvalidate`.
+     * You can set `safe=false` to get origin string content.
+     */
+    toString: (safe?: boolean) => string;
+    equals: (target: DecimalClass) => boolean;
+    lessEquals: (target: DecimalClass) => boolean;
+    negate: () => DecimalClass;
+}
+/**
+ * We can remove this when IE not support anymore
+ */
+export declare class NumberDecimal implements DecimalClass {
+    origin: string;
+    number: number;
+    empty: boolean;
+    constructor(value: ValueType);
+    negate(): NumberDecimal;
+    add(value: ValueType): NumberDecimal;
+    isEmpty(): boolean;
+    isNaN(): boolean;
+    isInvalidate(): boolean;
+    equals(target: DecimalClass): boolean;
+    lessEquals(target: DecimalClass): boolean;
+    toNumber(): number;
+    toString(safe?: boolean): string;
+}
+export declare class BigIntDecimal implements DecimalClass {
+    origin: string;
+    negative: boolean;
+    integer: bigint;
+    decimal: bigint;
+    /** BigInt will convert `0009` to `9`. We need record the len of decimal */
+    decimalLen: number;
+    empty: boolean;
+    nan: boolean;
+    constructor(value: string | number);
+    private getMark;
+    private getIntegerStr;
+    private getDecimalStr;
+    /**
+     * Align BigIntDecimal with same decimal length. e.g. 12.3 + 5 = 1230000
+     * This is used for add function only.
+     */
+    private alignDecimal;
+    negate(): BigIntDecimal;
+    add(value: ValueType): BigIntDecimal;
+    isEmpty(): boolean;
+    isNaN(): boolean;
+    isInvalidate(): boolean;
+    equals(target: DecimalClass): boolean;
+    lessEquals(target: DecimalClass): boolean;
+    toNumber(): number;
+    toString(safe?: boolean): string;
+}
+export default function getMiniDecimal(value: ValueType): DecimalClass;
+/**
+ * Align the logic of toFixed to around like 1.5 => 2
+ */
+export declare function toFixed(numStr: string, separatorStr: string, precision?: number): any;
diff --git a/node_modules/rc-input-number/lib/utils/MiniDecimal.js b/node_modules/rc-input-number/lib/utils/MiniDecimal.js
new file mode 100644
index 0000000..d17033c
--- /dev/null
+++ b/node_modules/rc-input-number/lib/utils/MiniDecimal.js
@@ -0,0 +1,329 @@
+"use strict";
+
+var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.NumberDecimal = exports.BigIntDecimal = void 0;
+exports.default = getMiniDecimal;
+exports.toFixed = toFixed;
+
+var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
+
+var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
+
+var _numberUtil = require("./numberUtil");
+
+var _supportUtil = require("./supportUtil");
+
+/* eslint-disable max-classes-per-file */
+
+/**
+ * We can remove this when IE not support anymore
+ */
+var NumberDecimal = /*#__PURE__*/function () {
+  function NumberDecimal(value) {
+    (0, _classCallCheck2.default)(this, NumberDecimal);
+    this.origin = '';
+    this.number = void 0;
+    this.empty = void 0;
+
+    if (!value && value !== 0 || !String(value).trim()) {
+      this.empty = true;
+      return;
+    }
+
+    this.origin = String(value);
+    this.number = Number(value);
+  }
+
+  (0, _createClass2.default)(NumberDecimal, [{
+    key: "negate",
+    value: function negate() {
+      return new NumberDecimal(-this.toNumber());
+    }
+  }, {
+    key: "add",
+    value: function add(value) {
+      if (this.isInvalidate()) {
+        return new NumberDecimal(value);
+      }
+
+      var target = Number(value);
+
+      if (Number.isNaN(target)) {
+        return this;
+      }
+
+      var number = this.number + target; // [Legacy] Back to safe integer
+
+      if (number > Number.MAX_SAFE_INTEGER) {
+        return new NumberDecimal(Number.MAX_SAFE_INTEGER);
+      }
+
+      if (number < Number.MIN_SAFE_INTEGER) {
+        return new NumberDecimal(Number.MIN_SAFE_INTEGER);
+      }
+
+      var maxPrecision = Math.max((0, _numberUtil.getNumberPrecision)(this.number), (0, _numberUtil.getNumberPrecision)(target));
+      return new NumberDecimal(number.toFixed(maxPrecision));
+    }
+  }, {
+    key: "isEmpty",
+    value: function isEmpty() {
+      return this.empty;
+    }
+  }, {
+    key: "isNaN",
+    value: function isNaN() {
+      return Number.isNaN(this.number);
+    }
+  }, {
+    key: "isInvalidate",
+    value: function isInvalidate() {
+      return this.isEmpty() || this.isNaN();
+    }
+  }, {
+    key: "equals",
+    value: function equals(target) {
+      return this.toNumber() === (target === null || target === void 0 ? void 0 : target.toNumber());
+    }
+  }, {
+    key: "lessEquals",
+    value: function lessEquals(target) {
+      return this.add(target.negate().toString()).toNumber() <= 0;
+    }
+  }, {
+    key: "toNumber",
+    value: function toNumber() {
+      return this.number;
+    }
+  }, {
+    key: "toString",
+    value: function toString() {
+      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
+
+      if (!safe) {
+        return this.origin;
+      }
+
+      if (this.isInvalidate()) {
+        return '';
+      }
+
+      return (0, _numberUtil.num2str)(this.number);
+    }
+  }]);
+  return NumberDecimal;
+}();
+
+exports.NumberDecimal = NumberDecimal;
+
+var BigIntDecimal = /*#__PURE__*/function () {
+  /** BigInt will convert `0009` to `9`. We need record the len of decimal */
+  function BigIntDecimal(value) {
+    (0, _classCallCheck2.default)(this, BigIntDecimal);
+    this.origin = '';
+    this.negative = void 0;
+    this.integer = void 0;
+    this.decimal = void 0;
+    this.decimalLen = void 0;
+    this.empty = void 0;
+    this.nan = void 0;
+
+    if (!value && value !== 0 || !String(value).trim()) {
+      this.empty = true;
+      return;
+    }
+
+    this.origin = String(value); // Act like Number convert
+
+    if (value === '-') {
+      this.nan = true;
+      return;
+    }
+
+    var mergedValue = value; // We need convert back to Number since it require `toFixed` to handle this
+
+    if ((0, _numberUtil.isE)(mergedValue)) {
+      mergedValue = Number(mergedValue);
+    }
+
+    mergedValue = typeof mergedValue === 'string' ? mergedValue : (0, _numberUtil.num2str)(mergedValue);
+
+    if ((0, _numberUtil.validateNumber)(mergedValue)) {
+      var trimRet = (0, _numberUtil.trimNumber)(mergedValue);
+      this.negative = trimRet.negative;
+      var numbers = trimRet.trimStr.split('.');
+      this.integer = BigInt(numbers[0]);
+      var decimalStr = numbers[1] || '0';
+      this.decimal = BigInt(decimalStr);
+      this.decimalLen = decimalStr.length;
+    } else {
+      this.nan = true;
+    }
+  }
+
+  (0, _createClass2.default)(BigIntDecimal, [{
+    key: "getMark",
+    value: function getMark() {
+      return this.negative ? '-' : '';
+    }
+  }, {
+    key: "getIntegerStr",
+    value: function getIntegerStr() {
+      return this.integer.toString();
+    }
+  }, {
+    key: "getDecimalStr",
+    value: function getDecimalStr() {
+      return this.decimal.toString().padStart(this.decimalLen, '0');
+    }
+    /**
+     * Align BigIntDecimal with same decimal length. e.g. 12.3 + 5 = 1230000
+     * This is used for add function only.
+     */
+
+  }, {
+    key: "alignDecimal",
+    value: function alignDecimal(decimalLength) {
+      var str = "".concat(this.getMark()).concat(this.getIntegerStr()).concat(this.getDecimalStr().padEnd(decimalLength, '0'));
+      return BigInt(str);
+    }
+  }, {
+    key: "negate",
+    value: function negate() {
+      var clone = new BigIntDecimal(this.toString());
+      clone.negative = !clone.negative;
+      return clone;
+    }
+  }, {
+    key: "add",
+    value: function add(value) {
+      if (this.isInvalidate()) {
+        return new BigIntDecimal(value);
+      }
+
+      var offset = new BigIntDecimal(value);
+
+      if (offset.isInvalidate()) {
+        return this;
+      }
+
+      var maxDecimalLength = Math.max(this.getDecimalStr().length, offset.getDecimalStr().length);
+      var myAlignedDecimal = this.alignDecimal(maxDecimalLength);
+      var offsetAlignedDecimal = offset.alignDecimal(maxDecimalLength);
+      var valueStr = (myAlignedDecimal + offsetAlignedDecimal).toString(); // We need fill string length back to `maxDecimalLength` to avoid parser failed
+
+      var _trimNumber = (0, _numberUtil.trimNumber)(valueStr),
+          negativeStr = _trimNumber.negativeStr,
+          trimStr = _trimNumber.trimStr;
+
+      var hydrateValueStr = "".concat(negativeStr).concat(trimStr.padStart(maxDecimalLength + 1, '0'));
+      return new BigIntDecimal("".concat(hydrateValueStr.slice(0, -maxDecimalLength), ".").concat(hydrateValueStr.slice(-maxDecimalLength)));
+    }
+  }, {
+    key: "isEmpty",
+    value: function isEmpty() {
+      return this.empty;
+    }
+  }, {
+    key: "isNaN",
+    value: function isNaN() {
+      return this.nan;
+    }
+  }, {
+    key: "isInvalidate",
+    value: function isInvalidate() {
+      return this.isEmpty() || this.isNaN();
+    }
+  }, {
+    key: "equals",
+    value: function equals(target) {
+      return this.toString() === (target === null || target === void 0 ? void 0 : target.toString());
+    }
+  }, {
+    key: "lessEquals",
+    value: function lessEquals(target) {
+      return this.add(target.negate().toString()).toNumber() <= 0;
+    }
+  }, {
+    key: "toNumber",
+    value: function toNumber() {
+      if (this.isNaN()) {
+        return NaN;
+      }
+
+      return Number(this.toString());
+    }
+  }, {
+    key: "toString",
+    value: function toString() {
+      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
+
+      if (!safe) {
+        return this.origin;
+      }
+
+      if (this.isInvalidate()) {
+        return '';
+      }
+
+      return (0, _numberUtil.trimNumber)("".concat(this.getMark()).concat(this.getIntegerStr(), ".").concat(this.getDecimalStr())).fullStr;
+    }
+  }]);
+  return BigIntDecimal;
+}();
+
+exports.BigIntDecimal = BigIntDecimal;
+
+function getMiniDecimal(value) {
+  // We use BigInt here.
+  // Will fallback to Number if not support.
+  if ((0, _supportUtil.supportBigInt)()) {
+    return new BigIntDecimal(value);
+  }
+
+  return new NumberDecimal(value);
+}
+/**
+ * Align the logic of toFixed to around like 1.5 => 2
+ */
+
+
+function toFixed(numStr, separatorStr, precision) {
+  if (numStr === '') {
+    return '';
+  }
+
+  var _trimNumber2 = (0, _numberUtil.trimNumber)(numStr),
+      negativeStr = _trimNumber2.negativeStr,
+      integerStr = _trimNumber2.integerStr,
+      decimalStr = _trimNumber2.decimalStr;
+
+  var precisionDecimalStr = "".concat(separatorStr).concat(decimalStr);
+  var numberWithoutDecimal = "".concat(negativeStr).concat(integerStr);
+
+  if (precision >= 0) {
+    // We will get last + 1 number to check if need advanced number
+    var advancedNum = Number(decimalStr[precision]);
+
+    if (advancedNum >= 5) {
+      var advancedDecimal = getMiniDecimal(numStr).add("".concat(negativeStr, "0.").concat('0'.repeat(precision)).concat(10 - advancedNum));
+      return toFixed(advancedDecimal.toString(), separatorStr, precision);
+    }
+
+    if (precision === 0) {
+      return numberWithoutDecimal;
+    }
+
+    return "".concat(numberWithoutDecimal).concat(separatorStr).concat(decimalStr.padEnd(precision, '0').slice(0, precision));
+  }
+
+  if (precisionDecimalStr === '.0') {
+    return numberWithoutDecimal;
+  }
+
+  return "".concat(numberWithoutDecimal).concat(precisionDecimalStr);
+}
\ No newline at end of file
diff --git a/node_modules/rc-input-number/lib/utils/numberUtil.d.ts b/node_modules/rc-input-number/lib/utils/numberUtil.d.ts
index c1e0948..34c94e2 100644
--- a/node_modules/rc-input-number/lib/utils/numberUtil.d.ts
+++ b/node_modules/rc-input-number/lib/utils/numberUtil.d.ts
@@ -1 +1,22 @@
-export declare function getDecupleSteps(step: string | number): string;
+/**
+ * Format string number to readable number
+ */
+export declare function trimNumber(numStr: string): {
+    negative: boolean;
+    negativeStr: string;
+    trimStr: string;
+    integerStr: string;
+    decimalStr: string;
+    fullStr: string;
+};
+export declare function isE(number: string | number): boolean;
+/**
+ * [Legacy] Convert 1e-9 to 0.000000001.
+ * This may lose some precision if user really want 1e-9.
+ */
+export declare function getNumberPrecision(number: string | number): number;
+/**
+ * Convert number (includes scientific notation) to -xxx.yyy format
+ */
+export declare function num2str(number: number): string;
+export declare function validateNumber(num: string | number): boolean;
diff --git a/node_modules/rc-input-number/lib/utils/numberUtil.js b/node_modules/rc-input-number/lib/utils/numberUtil.js
index af511db..8b73bf4 100644
--- a/node_modules/rc-input-number/lib/utils/numberUtil.js
+++ b/node_modules/rc-input-number/lib/utils/numberUtil.js
@@ -3,13 +3,116 @@
 Object.defineProperty(exports, "__esModule", {
   value: true
 });
-exports.getDecupleSteps = getDecupleSteps;
-var _miniDecimal = require("@rc-component/mini-decimal");
-function getDecupleSteps(step) {
-  var stepStr = typeof step === 'number' ? (0, _miniDecimal.num2str)(step) : (0, _miniDecimal.trimNumber)(step).fullStr;
-  var hasPoint = stepStr.includes('.');
-  if (!hasPoint) {
-    return step + '0';
-  }
-  return (0, _miniDecimal.trimNumber)(stepStr.replace(/(\d)\.(\d)/g, '$1$2.')).fullStr;
+exports.getNumberPrecision = getNumberPrecision;
+exports.isE = isE;
+exports.num2str = num2str;
+exports.trimNumber = trimNumber;
+exports.validateNumber = validateNumber;
+
+var _supportUtil = require("./supportUtil");
+
+/**
+ * Format string number to readable number
+ */
+function trimNumber(numStr) {
+  var str = numStr.trim();
+  var negative = str.startsWith('-');
+
+  if (negative) {
+    str = str.slice(1);
+  }
+
+  str = str // Remove decimal 0. `1.000` => `1.`, `1.100` => `1.1`
+  .replace(/(\.\d*[^0])0*$/, '$1') // Remove useless decimal. `1.` => `1`
+  .replace(/\.0*$/, '') // Remove integer 0. `0001` => `1`, 000.1' => `.1`
+  .replace(/^0+/, '');
+
+  if (str.startsWith('.')) {
+    str = "0".concat(str);
+  }
+
+  var trimStr = str || '0';
+  var splitNumber = trimStr.split('.');
+  var integerStr = splitNumber[0] || '0';
+  var decimalStr = splitNumber[1] || '0';
+
+  if (integerStr === '0' && decimalStr === '0') {
+    negative = false;
+  }
+
+  var negativeStr = negative ? '-' : '';
+  return {
+    negative: negative,
+    negativeStr: negativeStr,
+    trimStr: trimStr,
+    integerStr: integerStr,
+    decimalStr: decimalStr,
+    fullStr: "".concat(negativeStr).concat(trimStr)
+  };
+}
+
+function isE(number) {
+  var str = String(number);
+  return !Number.isNaN(Number(str)) && str.includes('e');
+}
+/**
+ * [Legacy] Convert 1e-9 to 0.000000001.
+ * This may lose some precision if user really want 1e-9.
+ */
+
+
+function getNumberPrecision(number) {
+  var numStr = String(number);
+
+  if (isE(number)) {
+    var precision = Number(numStr.slice(numStr.indexOf('e-') + 2));
+    var decimalMatch = numStr.match(/\.(\d+)/);
+
+    if (decimalMatch === null || decimalMatch === void 0 ? void 0 : decimalMatch[1]) {
+      precision += decimalMatch[1].length;
+    }
+
+    return precision;
+  }
+
+  return numStr.includes('.') && validateNumber(numStr) ? numStr.length - numStr.indexOf('.') - 1 : 0;
+}
+/**
+ * Convert number (includes scientific notation) to -xxx.yyy format
+ */
+
+
+function num2str(number) {
+  var numStr = String(number);
+
+  if (isE(number)) {
+    if (number > Number.MAX_SAFE_INTEGER) {
+      return String((0, _supportUtil.supportBigInt)() ? BigInt(number).toString() : Number.MAX_SAFE_INTEGER);
+    }
+
+    if (number < Number.MIN_SAFE_INTEGER) {
+      return String((0, _supportUtil.supportBigInt)() ? BigInt(number).toString() : Number.MIN_SAFE_INTEGER);
+    }
+
+    numStr = number.toFixed(getNumberPrecision(numStr));
+  }
+
+  return trimNumber(numStr).fullStr;
+}
+
+function validateNumber(num) {
+  if (typeof num === 'number') {
+    return !Number.isNaN(num);
+  } // Empty
+
+
+  if (!num) {
+    return false;
+  }
+
+  return (// Normal type: 11.28
+    /^\s*-?\d+(\.\d+)?\s*$/.test(num) || // Pre-number: 1.
+    /^\s*-?\d+\.\s*$/.test(num) || // Post-number: .1
+    /^\s*-?\.\d+\s*$/.test(num)
+  );
 }
\ No newline at end of file
diff --git a/node_modules/rc-input-number/lib/utils/supportUtil.d.ts b/node_modules/rc-input-number/lib/utils/supportUtil.d.ts
new file mode 100644
index 0000000..885df7c
--- /dev/null
+++ b/node_modules/rc-input-number/lib/utils/supportUtil.d.ts
@@ -0,0 +1 @@
+export declare function supportBigInt(): boolean;
diff --git a/node_modules/rc-input-number/lib/utils/supportUtil.js b/node_modules/rc-input-number/lib/utils/supportUtil.js
new file mode 100644
index 0000000..a9a38bf
--- /dev/null
+++ b/node_modules/rc-input-number/lib/utils/supportUtil.js
@@ -0,0 +1,10 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.supportBigInt = supportBigInt;
+
+function supportBigInt() {
+  return typeof BigInt === 'function';
+}
\ No newline at end of file
